package org.jboss.qa.examples.bpm_taxi;

import org.jboss.qa.examples.bpm_taxi.*;
import java.util.Date;
import java.time.Instant;
import java.time.temporal.ChronoUnit;

declare Price
    base: double
    discount: double
end

declare DistanceInKm
    value: double
end

rule 'Calculate distance between two addresses'
ruleflow-group 'calculatePrice'
when
  Drive($start: from, $end: to)
  not DistanceInKm()
then
  // get distance
  final Location from = $start.getLocation();
  final Location to = $end.getLocation();
  double distance = from.computeDistance(to) / 1000.0;
  // insert fact
  DistanceInKm d = new DistanceInKm(distance);
  insert(d);
end

rule 'Calculate base price based on the distance'
ruleflow-group 'calculatePrice'
when
  distance: DistanceInKm()
  not Price()
then
  // get prices
  double pricePerKilometer = 40.0;
  Price p = new Price(pricePerKilometer * distance.getValue(), 0.0);
  // update knowledge
  insert(p);
  System.out.println("Base price: " + p.getBase());
end

rule 'Add discount for a returning customer'
ruleflow-group 'calculatePrice'
no-loop
when
  c: Customer($h: history)
  p: Price()
then
  modify (p) {
    setDiscount($h.size() * 10.0);   
  }
  System.out.println("Discount: " + p.getDiscount());
end

rule 'Set final price'
ruleflow-group 'calculatePrice'
when
  drive: Drive(price == null || price == 0.0)
  p: Price()
then
  modify (drive) {
    setPrice(p.getBase() - p.getDiscount());
  }
  System.out.println("Final price: " + drive.getPrice());
end